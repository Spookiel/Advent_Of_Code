from collections import defaultdict, Counter,deque
import re
def get_modes(modes):
    return [int(mode) for mode in [modes[2], modes[1], modes[0], modes[3:]]]


class Computer:
    def __init__(self, data):
        self.idx = 0
        self.data = data[:] + [0] * 10000
        self.done = False
        self.output = None
        self.inputs = []
        self.relative_base = 0

    def get_params(self, mode1, mode2, mode3):
        return self.get_param(mode1, 1), self.get_param(mode2, 2), self.get_param(mode3, 3)

    def get_param(self, mode, increment):
        if mode == 0:
            return self.data[self.idx + increment]
        elif mode == 1:
            return self.idx + increment
        else:
            return self.relative_base + self.data[self.idx + increment]

    def add(self, mode1, mode2, mode3):
        param1, param2, param3 = self.get_params(mode1, mode2, mode3)
        self.data[param3] = self.data[param1] + self.data[param2]
        self.idx += 4

    def multiply(self, mode1, mode2, mode3):
        param1, param2, param3 = self.get_params(mode1, mode2, mode3)
        self.data[param3] = self.data[param1] * self.data[param2]
        self.idx += 4

    def take_input(self, mode1):
        param1 = self.get_param(mode1, 1)
        self.data[param1] = self.inputs.pop(0)
        self.idx += 2

    def create_output(self, mode1):
        param1 = self.get_param(mode1, 1)
        self.output = self.data[param1]
        self.idx += 2
        return self.output

    def less_than(self, mode1, mode2, mode3):
        param1, param2, param3 = self.get_params(mode1, mode2, mode3)
        self.data[param3] = 1 if self.data[param1] < self.data[param2] else 0
        self.idx += 4

    def equals(self, mode1, mode2, mode3):
        param1, param2, param3 = self.get_params(mode1, mode2, mode3)
        self.data[param3] = 1 if self.data[param1] == self.data[param2] else 0
        self.idx += 4

    def jump_if_true(self, mode1, mode2, mode3):
        param1, param2, param3 = self.get_params(mode1, mode2, mode3)
        self.idx = self.data[param2] if self.data[param1] != 0 else self.idx + 3

    def jump_if_false(self, mode1, mode2, mode3):
        param1, param2, param3 = self.get_params(mode1, mode2, mode3)
        self.idx = self.data[param2] if self.data[param1] == 0 else self.idx + 3

    def relative_offset(self, mode1):
        param1 = self.get_param(mode1, 1)
        self.relative_base += self.data[param1]
        self.idx += 2

    def calculate(self, input_val=None):
        if input_val is not None:
            self.inputs.append(input_val)
        modes = {
            1: lambda: self.add(mode1, mode2, mode3),
            2: lambda: self.multiply(mode1, mode2, mode3),
            3: lambda: self.take_input(mode1),
            5: lambda: self.jump_if_true(mode1, mode2, mode3),
            6: lambda: self.jump_if_false(mode1, mode2, mode3),
            7: lambda: self.less_than(mode1, mode2, mode3),
            8: lambda: self.equals(mode1, mode2, mode3),
            9: lambda: self.relative_offset(mode1)
        }
        while True:
            mode1, mode2, mode3, opcode = get_modes(f"{self.data[self.idx]:05}")
            if opcode in modes:
                modes[opcode]()
            elif opcode == 4:
                return self.create_output(mode1)
            elif opcode == 99:
                self.done = True
                return self.output



data2 = """1,330,331,332,109,4632,1101,1182,0,15,1101,1475,0,24,1001,0,0,570,1006,570,36,1002,571,1,0,1001,570,-1,570,1001,24,1,24,1106,0,18,1008,571,0,571,1001,15,1,15,1008,15,1475,570,1006,570,14,21101,58,0,0,1106,0,786,1006,332,62,99,21102,333,1,1,21102,73,1,0,1105,1,579,1101,0,0,572,1102,1,0,573,3,574,101,1,573,573,1007,574,65,570,1005,570,151,107,67,574,570,1005,570,151,1001,574,-64,574,1002,574,-1,574,1001,572,1,572,1007,572,11,570,1006,570,165,101,1182,572,127,1001,574,0,0,3,574,101,1,573,573,1008,574,10,570,1005,570,189,1008,574,44,570,1006,570,158,1105,1,81,21102,1,340,1,1106,0,177,21102,477,1,1,1105,1,177,21102,1,514,1,21102,176,1,0,1106,0,579,99,21102,184,1,0,1105,1,579,4,574,104,10,99,1007,573,22,570,1006,570,165,102,1,572,1182,21101,375,0,1,21101,211,0,0,1106,0,579,21101,1182,11,1,21102,222,1,0,1106,0,979,21101,388,0,1,21102,1,233,0,1105,1,579,21101,1182,22,1,21102,1,244,0,1105,1,979,21101,0,401,1,21101,255,0,0,1105,1,579,21101,1182,33,1,21101,266,0,0,1106,0,979,21102,414,1,1,21101,277,0,0,1105,1,579,3,575,1008,575,89,570,1008,575,121,575,1,575,570,575,3,574,1008,574,10,570,1006,570,291,104,10,21101,0,1182,1,21101,0,313,0,1105,1,622,1005,575,327,1101,0,1,575,21101,0,327,0,1105,1,786,4,438,99,0,1,1,6,77,97,105,110,58,10,33,10,69,120,112,101,99,116,101,100,32,102,117,110,99,116,105,111,110,32,110,97,109,101,32,98,117,116,32,103,111,116,58,32,0,12,70,117,110,99,116,105,111,110,32,65,58,10,12,70,117,110,99,116,105,111,110,32,66,58,10,12,70,117,110,99,116,105,111,110,32,67,58,10,23,67,111,110,116,105,110,117,111,117,115,32,118,105,100,101,111,32,102,101,101,100,63,10,0,37,10,69,120,112,101,99,116,101,100,32,82,44,32,76,44,32,111,114,32,100,105,115,116,97,110,99,101,32,98,117,116,32,103,111,116,58,32,36,10,69,120,112,101,99,116,101,100,32,99,111,109,109,97,32,111,114,32,110,101,119,108,105,110,101,32,98,117,116,32,103,111,116,58,32,43,10,68,101,102,105,110,105,116,105,111,110,115,32,109,97,121,32,98,101,32,97,116,32,109,111,115,116,32,50,48,32,99,104,97,114,97,99,116,101,114,115,33,10,94,62,118,60,0,1,0,-1,-1,0,1,0,0,0,0,0,0,1,54,10,0,109,4,2101,0,-3,587,20102,1,0,-1,22101,1,-3,-3,21102,0,1,-2,2208,-2,-1,570,1005,570,617,2201,-3,-2,609,4,0,21201,-2,1,-2,1106,0,597,109,-4,2106,0,0,109,5,1202,-4,1,629,21001,0,0,-2,22101,1,-4,-4,21102,0,1,-3,2208,-3,-2,570,1005,570,781,2201,-4,-3,652,21002,0,1,-1,1208,-1,-4,570,1005,570,709,1208,-1,-5,570,1005,570,734,1207,-1,0,570,1005,570,759,1206,-1,774,1001,578,562,684,1,0,576,576,1001,578,566,692,1,0,577,577,21102,702,1,0,1106,0,786,21201,-1,-1,-1,1106,0,676,1001,578,1,578,1008,578,4,570,1006,570,724,1001,578,-4,578,21102,731,1,0,1105,1,786,1105,1,774,1001,578,-1,578,1008,578,-1,570,1006,570,749,1001,578,4,578,21102,756,1,0,1105,1,786,1106,0,774,21202,-1,-11,1,22101,1182,1,1,21101,774,0,0,1105,1,622,21201,-3,1,-3,1105,1,640,109,-5,2105,1,0,109,7,1005,575,802,21002,576,1,-6,20101,0,577,-5,1106,0,814,21101,0,0,-1,21102,1,0,-5,21101,0,0,-6,20208,-6,576,-2,208,-5,577,570,22002,570,-2,-2,21202,-5,77,-3,22201,-6,-3,-3,22101,1475,-3,-3,2102,1,-3,843,1005,0,863,21202,-2,42,-4,22101,46,-4,-4,1206,-2,924,21102,1,1,-1,1106,0,924,1205,-2,873,21102,1,35,-4,1106,0,924,1202,-3,1,878,1008,0,1,570,1006,570,916,1001,374,1,374,2102,1,-3,895,1102,2,1,0,2101,0,-3,902,1001,438,0,438,2202,-6,-5,570,1,570,374,570,1,570,438,438,1001,578,558,921,21002,0,1,-4,1006,575,959,204,-4,22101,1,-6,-6,1208,-6,77,570,1006,570,814,104,10,22101,1,-5,-5,1208,-5,41,570,1006,570,810,104,10,1206,-1,974,99,1206,-1,974,1101,0,1,575,21101,0,973,0,1106,0,786,99,109,-7,2106,0,0,109,6,21101,0,0,-4,21101,0,0,-3,203,-2,22101,1,-3,-3,21208,-2,82,-1,1205,-1,1030,21208,-2,76,-1,1205,-1,1037,21207,-2,48,-1,1205,-1,1124,22107,57,-2,-1,1205,-1,1124,21201,-2,-48,-2,1105,1,1041,21101,0,-4,-2,1106,0,1041,21102,1,-5,-2,21201,-4,1,-4,21207,-4,11,-1,1206,-1,1138,2201,-5,-4,1059,2102,1,-2,0,203,-2,22101,1,-3,-3,21207,-2,48,-1,1205,-1,1107,22107,57,-2,-1,1205,-1,1107,21201,-2,-48,-2,2201,-5,-4,1090,20102,10,0,-1,22201,-2,-1,-2,2201,-5,-4,1103,2102,1,-2,0,1106,0,1060,21208,-2,10,-1,1205,-1,1162,21208,-2,44,-1,1206,-1,1131,1105,1,989,21102,439,1,1,1106,0,1150,21102,477,1,1,1106,0,1150,21101,514,0,1,21101,0,1149,0,1105,1,579,99,21101,1157,0,0,1106,0,579,204,-2,104,10,99,21207,-3,22,-1,1206,-1,1138,1202,-5,1,1176,2101,0,-4,0,109,-6,2106,0,0,40,9,11,9,48,1,7,1,11,1,7,1,48,1,7,1,11,1,7,1,48,1,7,1,11,1,7,1,48,1,7,1,11,1,7,1,48,1,7,1,11,1,7,1,48,1,7,1,11,1,7,1,48,1,7,1,11,1,7,1,48,1,7,1,7,13,48,1,7,1,7,1,3,1,16,9,19,13,7,1,5,7,16,1,7,1,19,1,19,1,7,1,20,1,7,1,19,1,19,11,18,1,7,1,19,1,27,1,1,1,18,1,7,1,19,1,27,1,1,1,18,1,7,1,19,1,27,1,1,1,18,1,7,1,19,1,27,11,10,1,7,1,19,1,29,1,7,1,10,11,17,1,29,11,16,1,1,1,17,1,37,1,1,1,16,1,1,1,11,7,37,1,1,1,16,1,1,1,11,1,43,1,1,1,16,11,3,1,43,11,10,1,7,1,3,1,45,1,7,1,10,11,1,1,45,1,7,1,18,1,1,1,1,1,45,1,7,1,18,1,1,1,1,1,45,1,7,1,18,1,1,1,1,1,45,1,7,1,18,11,39,1,7,1,20,1,1,1,45,1,7,1,16,7,45,9,16,1,3,1,64,13,64,1,7,1,68,1,7,1,68,1,7,1,68,1,7,1,68,1,7,1,68,1,7,1,68,1,7,1,68,9,60"""
data = """1,330,331,332,109,3508,1102,1,1182,16,1101,0,1473,24,101,0,0,570,1006,570,36,1002,571,1,0,1001,570,-1,570,1001,24,1,24,1105,1,18,1008,571,0,571,1001,16,1,16,1008,16,1473,570,1006,570,14,21102,58,1,0,1105,1,786,1006,332,62,99,21102,1,333,1,21101,0,73,0,1106,0,579,1102,0,1,572,1101,0,0,573,3,574,101,1,573,573,1007,574,65,570,1005,570,151,107,67,574,570,1005,570,151,1001,574,-64,574,1002,574,-1,574,1001,572,1,572,1007,572,11,570,1006,570,165,101,1182,572,127,1002,574,1,0,3,574,101,1,573,573,1008,574,10,570,1005,570,189,1008,574,44,570,1006,570,158,1105,1,81,21102,340,1,1,1106,0,177,21101,477,0,1,1105,1,177,21102,514,1,1,21102,1,176,0,1106,0,579,99,21101,184,0,0,1106,0,579,4,574,104,10,99,1007,573,22,570,1006,570,165,101,0,572,1182,21102,375,1,1,21101,211,0,0,1105,1,579,21101,1182,11,1,21102,222,1,0,1105,1,979,21102,388,1,1,21102,233,1,0,1105,1,579,21101,1182,22,1,21101,0,244,0,1106,0,979,21102,401,1,1,21101,255,0,0,1106,0,579,21101,1182,33,1,21101,266,0,0,1106,0,979,21101,0,414,1,21102,1,277,0,1106,0,579,3,575,1008,575,89,570,1008,575,121,575,1,575,570,575,3,574,1008,574,10,570,1006,570,291,104,10,21101,0,1182,1,21101,0,313,0,1106,0,622,1005,575,327,1102,1,1,575,21102,1,327,0,1106,0,786,4,438,99,0,1,1,6,77,97,105,110,58,10,33,10,69,120,112,101,99,116,101,100,32,102,117,110,99,116,105,111,110,32,110,97,109,101,32,98,117,116,32,103,111,116,58,32,0,12,70,117,110,99,116,105,111,110,32,65,58,10,12,70,117,110,99,116,105,111,110,32,66,58,10,12,70,117,110,99,116,105,111,110,32,67,58,10,23,67,111,110,116,105,110,117,111,117,115,32,118,105,100,101,111,32,102,101,101,100,63,10,0,37,10,69,120,112,101,99,116,101,100,32,82,44,32,76,44,32,111,114,32,100,105,115,116,97,110,99,101,32,98,117,116,32,103,111,116,58,32,36,10,69,120,112,101,99,116,101,100,32,99,111,109,109,97,32,111,114,32,110,101,119,108,105,110,101,32,98,117,116,32,103,111,116,58,32,43,10,68,101,102,105,110,105,116,105,111,110,115,32,109,97,121,32,98,101,32,97,116,32,109,111,115,116,32,50,48,32,99,104,97,114,97,99,116,101,114,115,33,10,94,62,118,60,0,1,0,-1,-1,0,1,0,0,0,0,0,0,1,42,14,0,109,4,1201,-3,0,586,21001,0,0,-1,22101,1,-3,-3,21102,0,1,-2,2208,-2,-1,570,1005,570,617,2201,-3,-2,609,4,0,21201,-2,1,-2,1106,0,597,109,-4,2105,1,0,109,5,1202,-4,1,630,20101,0,0,-2,22101,1,-4,-4,21101,0,0,-3,2208,-3,-2,570,1005,570,781,2201,-4,-3,652,21001,0,0,-1,1208,-1,-4,570,1005,570,709,1208,-1,-5,570,1005,570,734,1207,-1,0,570,1005,570,759,1206,-1,774,1001,578,562,684,1,0,576,576,1001,578,566,692,1,0,577,577,21102,702,1,0,1105,1,786,21201,-1,-1,-1,1105,1,676,1001,578,1,578,1008,578,4,570,1006,570,724,1001,578,-4,578,21102,1,731,0,1105,1,786,1105,1,774,1001,578,-1,578,1008,578,-1,570,1006,570,749,1001,578,4,578,21101,0,756,0,1106,0,786,1106,0,774,21202,-1,-11,1,22101,1182,1,1,21102,774,1,0,1106,0,622,21201,-3,1,-3,1106,0,640,109,-5,2106,0,0,109,7,1005,575,802,21002,576,1,-6,21001,577,0,-5,1106,0,814,21101,0,0,-1,21101,0,0,-5,21101,0,0,-6,20208,-6,576,-2,208,-5,577,570,22002,570,-2,-2,21202,-5,55,-3,22201,-6,-3,-3,22101,1473,-3,-3,2102,1,-3,843,1005,0,863,21202,-2,42,-4,22101,46,-4,-4,1206,-2,924,21102,1,1,-1,1105,1,924,1205,-2,873,21101,35,0,-4,1105,1,924,1201,-3,0,878,1008,0,1,570,1006,570,916,1001,374,1,374,1201,-3,0,895,1102,1,2,0,2101,0,-3,902,1001,438,0,438,2202,-6,-5,570,1,570,374,570,1,570,438,438,1001,578,558,922,20102,1,0,-4,1006,575,959,204,-4,22101,1,-6,-6,1208,-6,55,570,1006,570,814,104,10,22101,1,-5,-5,1208,-5,37,570,1006,570,810,104,10,1206,-1,974,99,1206,-1,974,1102,1,1,575,21101,973,0,0,1106,0,786,99,109,-7,2105,1,0,109,6,21101,0,0,-4,21102,0,1,-3,203,-2,22101,1,-3,-3,21208,-2,82,-1,1205,-1,1030,21208,-2,76,-1,1205,-1,1037,21207,-2,48,-1,1205,-1,1124,22107,57,-2,-1,1205,-1,1124,21201,-2,-48,-2,1106,0,1041,21102,1,-4,-2,1105,1,1041,21102,1,-5,-2,21201,-4,1,-4,21207,-4,11,-1,1206,-1,1138,2201,-5,-4,1059,1201,-2,0,0,203,-2,22101,1,-3,-3,21207,-2,48,-1,1205,-1,1107,22107,57,-2,-1,1205,-1,1107,21201,-2,-48,-2,2201,-5,-4,1090,20102,10,0,-1,22201,-2,-1,-2,2201,-5,-4,1103,2101,0,-2,0,1106,0,1060,21208,-2,10,-1,1205,-1,1162,21208,-2,44,-1,1206,-1,1131,1106,0,989,21101,439,0,1,1105,1,1150,21101,477,0,1,1106,0,1150,21102,514,1,1,21102,1149,1,0,1106,0,579,99,21102,1157,1,0,1105,1,579,204,-2,104,10,99,21207,-3,22,-1,1206,-1,1138,1201,-5,0,1176,2102,1,-4,0,109,-6,2106,0,0,40,9,46,1,7,1,46,1,7,1,46,1,7,1,46,1,7,1,46,1,7,1,42,13,42,1,3,1,50,1,3,1,50,1,3,1,50,1,3,9,42,1,11,1,36,9,9,1,36,1,5,1,1,1,9,1,18,13,5,1,5,7,5,1,18,1,17,1,7,1,9,1,8,7,3,1,13,11,1,1,9,1,8,1,5,1,3,1,13,1,3,1,5,1,1,1,9,1,6,7,1,1,3,1,13,1,3,1,5,1,1,1,9,1,6,1,1,1,3,1,1,1,3,1,13,1,3,1,5,1,1,1,9,1,6,1,1,1,3,1,1,1,3,1,13,1,3,1,5,1,1,1,9,1,6,1,1,1,3,1,1,1,3,1,13,1,3,1,5,1,1,1,9,1,6,1,1,11,13,1,3,7,1,1,9,8,5,1,1,1,17,1,11,1,15,2,5,1,1,1,5,13,11,9,7,2,5,1,1,1,5,1,31,1,7,10,5,1,31,1,7,1,6,1,7,1,31,1,7,1,6,1,7,1,25,11,3,1,6,1,7,1,25,1,5,1,3,1,3,1,6,9,25,1,1,13,40,1,1,1,3,1,3,1,44,1,1,1,3,1,3,1,44,1,1,1,3,1,3,1,44,7,3,1,46,1,7,1,46,9,4"""
def find(board):
    total = 0
    bigy, bigx = max([pos[1] for pos in board.keys()]), max([pos[0] for pos in board.keys()])
    for y in range(bigy):
        for x in range(bigx):
            #print(x, y)
            counter = 0
            if board.get((x, y), 0)==1:

                if board.get((x+1, y), 0)==1:
                    counter += 1
                if board.get((x-1, y), 0)==1:
                    counter += 1
                if board.get((x, y+1), 0)==1:
                    counter += 1
                if board.get((x, y-1), 0)==1:
                    counter += 1

                if counter==4:
                    total += x*y

    print(total)

def drawGrid(board):
    bigy, bigx = max([pos[1] for pos in board.keys()]), max([pos[0] for pos in board.keys()])
    print(bigy, bigx)
    for y in range(bigy):
        for x in range(bigx):
            print("#" if board[(x, y)]==1 else "." if board[(x, y)]==0 else "^", end=" ")
        print("\n")

def check(lst):
    for i in lst:
        if 0 in i:
            return False
    return True

def get_instructions(board):
    bigy, bigx = max([pos[1] for pos in board.keys()]), max([pos[0] for pos in board.keys()])
    x, y = [k for k,v in board.items() if v=="^"][0]
    turnR = {
        (0, 1): (-1, 0),
        (1, 0): (0, 1),
        (0, -1): (1, 0),
        (-1, 0): (0, -1),
    }
    turnL = {
        (0, 1): (1, 0),
        (-1, 0): (0, 1),
        (0, -1): (-1, 0),
        (1, 0): (0, -1),
    }
    direc = 0,-1
    path = []
    functions = ["R 6 L 10 R 8 R 8 R 12", "L 8 L 10"]
    while True:
        nx, ny = x+direc[0], y+direc[1]
        if board.get((nx, ny), 0)==1:
            x,y = nx, ny
            path[-1] += 1
        else:
            tryR = turnR[direc]
            nx, ny = x+tryR[0], y+tryR[1]
            if board.get((nx, ny), 0) == 1:
                x, y = nx, ny
                direc = tryR
                path.append("R")
                path.append(1)
            else:
                tryL = turnL[direc]
                nx, ny= x+tryL[0], y+tryL[1]
                if board.get((nx, ny), 0) == 1:
                    x, y = nx, ny
                    direc = tryL
                    path.append("L")
                    path.append(1)
        ans = " ".join(list(map(str, path)))
        if len(ans)==169:
            break
    for f in functions:
        ans = ans.replace(f, chr(65+functions.index(f)))
    moves = sum([i for i in path if str(i).isdigit()])
    return moves, path

def final(lines):
    mrout = "A,C,A,B,C,B,C,A,B,C"
    to_inp_mrout = [ord(i) for i in mrout]
    to_inp_mrout.append(10)

    f1 = "L,6,R,8,R,12,L,6,L,8"
    to_inp_f1 = [ord(i) for i in f1]
    to_inp_f1.append(10)

    f2 = "L,8,L,10,L,6,L,6"
    to_inp_f2 = [ord(i) for i in f2]
    to_inp_f2.append(10)

    f3 = "L,10,L,8,R,12"
    to_inp_f3 = [ord(i) for i in f3]
    to_inp_f3.append(10)

    lines[0] = 2
    go = []
    go.extend(to_inp_mrout)
    go.extend(to_inp_f1)
    go.extend(to_inp_f2)
    go.extend(to_inp_f3)
    go.extend([ord("n"), 10])
    computer = Computer(lines)
    computer.inputs = go
    while not computer.done:
        computer.calculate()
    print(computer.data[438])


def solve(data):
    #1 as scaffold, 0 as empty
    lines = [int(i) for i in data.split(",")]
    computer = Computer(lines)
    board = {}
    draw = (0,0)
    while True:
        try:
            nin = computer.calculate(1)
            if nin==35:
                board[draw] = 1
            elif nin==46:
                board[draw] = 0
            else:
                if nin==10:
                    draw = (-1, draw[1]+1)
                elif nin==94:
                    print(draw[0], draw[1], "FOUND ROBOT")
                    board[draw] = "^"
                else:
                    print(nin, "STOPPED")
                    break
            draw = (draw[0]+1, draw[1])
            if draw[1] > 2000:
                break
        except Exception as e:
            print("ERROR", e)
    find(board)
    expected, path = get_instructions(board)
    total = 1075882
    print(expected, path, total)
    final(lines)
    draw_pygame(expected, total, path, board)

import pygame
import sys
pygame.init()
def text_objects(text, font):
    textSurface = font.render(text, True, (255,255,255))
    return textSurface, textSurface.get_rect()

def message_display(text, screen, height):
    largeText = pygame.font.Font('Graduate2\Graduate-Regular.ttf',50)
    TextSurf, TextRect = text_objects(text, largeText)
    TextRect.center = ((300),(height-20))
    screen.blit(TextSurf, TextRect)

def draw_pygame(expected, total, moves, board):
    rx, ry = [(x,y) for x,y in board.keys() if board[(x, y)]=="^"][0]
    width,height = 605*3,450*2
    pygame.mouse.set_visible(False)
    screen = pygame.display.set_mode((width,height), pygame.FULLSCREEN)
    done = False
    """Compute variables for scaling"""
    largeX, largeY = max([i[0] for i in board.keys()])+1, max([i[1] for i in board.keys()])+1
    margin = 1
    tileWidth, tileHeight = 30,20
    direction = 0
    to_move = []
    moves[-1] += 2
    dic = {0:(0,-1), 90:(1,0), 180:(0,1), 270:(-1,0)}
    for move in moves:
        if move=="L":
            direction -= 90
            direction %= 360
        elif move=="R":
            direction += 90
            direction %= 360
        else:
            for m in range(move):
                nx, ny = rx+dic[direction][0], ry+dic[direction][1]
                to_move.append((nx, ny))
                rx, ry = nx, ny
    clock = pygame.time.Clock()
    counter = 0
    start = False
    pygame.time.delay(4000)
    while not done:
        for event in pygame.event.get():
            if event.type==pygame.QUIT:
                done = True
                pygame.quit()
                sys.exit(1)

        screen.fill((0,0,0))
        if counter < len(to_move):
            board[to_move[counter]] = "A"
        for row in range(largeY):
            for column in range(largeX):
                if board[(column, row)]==1:
                    pygame.draw.rect(screen, (255,255,255), [(margin+tileWidth)*column+margin, (margin+tileHeight)*row+margin, tileWidth, tileHeight])
                elif board[(column, row)]==0:
                    pygame.draw.rect(screen, (80,80,80),
                                     [(margin + tileWidth) * column + margin, (margin + tileHeight) * row + margin,
                                      tileWidth, tileHeight])
                else:
                    pygame.draw.rect(screen, (135,206,235),
                                     [(margin + tileWidth) * column + margin, (margin + tileHeight) * row + margin,
                                      tileWidth, tileHeight])
        if counter < len(to_move):
            counter += 1
            message_display("DUST CLEARED: " + str(total // len(to_move) * counter), screen, height)
        else:
            message_display("DUST CLEARED: " + str(total), screen, height)
        pygame.display.flip()
        clock.tick(15)



print(pygame.font.get_fonts())
test = """..#..........
..#..........
#######...###
#.#...#...#.#
#############
..#...#...#..
..#####...^.."""
tboard = [[1 if i=="#" else 0 for i in j] for j in test.splitlines()]

tdic = {}
for y in range(len(tboard)):
    for x in range(len(tboard[0])):
        tdic[(x, y)] = tboard[y][x]

solve(data)